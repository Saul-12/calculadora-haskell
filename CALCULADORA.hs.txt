funcionInicio= do
    funcionMenu True
funcionMenu hacer = do
    if hacer
        then do
        putStrLn("| BIENVENIDO AL MENU |\n\n SELECCIONA UNA DE LAS OPCIONES SIGUIENTES")
        putStrLn("\n1.- SERIE DE FIBONACCI")
        putStrLn("2.- RECURSIVIDAD DEL 1 - 10")
        putStrLn("3.- FACTORIAL DE UN NUMERO")
        putStrLn("4.- RECURSIVIDAD DEL 10 - 0")
        putStrLn("5.- PALINDROMOS")
        putStrLn("6.- CALCULADORA ARITMETICA")
        putStrLn("7.- SALIR")
        opc <- getLine

        case opc of
            "1" -> funcionFibonacci--Entrada por teclado
            "2" -> funcionRecursividadpp 1 --Parametro ya establecido
            "3" -> funcionFactorial --ent
            "4" -> funcionRecursividadmm [0,1,2,3,4,5,6,7,8,9,10] --lista de parametros en arreglo del 0 al 10
            "5" -> funcionPalindromos--Entrada por teclado
            "6" -> funcionCalcu --lEntrada por teclado y seccionado por menu (entrada por teclado)
            "7" -> funcionMenu False
    else
        putStr "SUERTE Y VUELVE PRONTO  \n"
--INICIO FIBONACCI
funcionFibonacci = do
    putStrLn("SUSESION DE FIBONACCI EN HASKELL\n\n")
    putStrLn "¿CUAL POSICION DESEAS SABER?\n"
    n <- getLine
    let nInt = read n::Int
    --print (nInt)
    serie nInt
    funcionMenu True
serie nInt = do
    let seriea = ["0","1","1","2","3","5","8","14","21","35","55","89","144","233","377"]
    if(nInt <= 15)
        then do
            print(seriea !! nInt)
    else do
        funcionMenu True    
--INICIO DE  1 2 3 4 5 6 8 9 10
funcionRecursividad n = do
    if n <= 10
        then do
            print n
            funcionRecursividad(n+1)
    else do
        putStrLn("\n CONDICION CUMPLIDA.. \n")
    funcionMenu True
--INICIO DE FACTORIAL DE UN NUMERO
funcionFactorial = do
    putStrLn("ESTAS DENTRO DE FACTORIAL DE UN NUMERO")
    print("INGRESA TU NUMERO :")
    n <- getLine
    print((product [1..(read n)]))
    putStrLn("\n CONDICION CUMPLIDA \n")
    putStrLn("\n VOLVIENDO AL MENU ... \n")
    funcionMenu True

--AQUI EMPEZAMOS DEL 10 9 8 7 6 5 4 3 2 1 0
funcionRecursividad n = do
    if null n
        then do
            putStrLn("\n CONDICION CUMPLIDA \n")
            funcionMenu True
    else do
        print(n)
        let nl = init n
        funcionRecursividad(nl)

--INICIO DE PALINDROMOS
funcionPalindromos = do
    putStrLn(" ESTAS DENTRO DE PALINDROMOS \n")
    putStrLn("Ingresa la cadena:   \n")
    cdn <- getLine
    let cadena = cdn == reverse cdn
    if cadena == True
        then do 
            putStrLn("\n CADENA ACEPTADA ES UN PALINDROMO \n")
            funcionPalindromos
        else do
            putStrLn("\n Ésta cadena No es un Palindromo \n")
            putStrLn("\n Regresando al menú principal ... \n")
            funcionMenu True

--INICIO EL CODIGO DE CALCULADORA
funcionCalcu = do
    putStrLn(" ESTAS DENTRO DE LA CALCULADORA   ")
    funcion True

funcion compila = do
    if compila
        then do
        putStr "\n1.- Suma \n"
        putStr "2.- Resta \n"
        putStr "3.- Multiplicación \n"
        putStr "4.- División \n"
        putStr "5.- Salir \n"
        op <- getLine

        case op of
            "1" -> suma
            "2" -> rest
            "3" -> multiplica
            "4" -> divi
            "5" -> funcionMenu True
            
    else
        putStr "PULSA 5 PARA VOLVER AL MENU"

suma = do
    putStrLn ("Introduce al primer numero: \n")
    a <- getLine
    putStrLn ("Introduce al segundo numero: \n")
    b <- getLine

    let aInt = read a::Int
    let bInt = read b::Int
    let resultado = aInt + bInt

    putStrLn ("El resultado es: "++ show resultado)
    putStrLn("\n SE  CUMPLE  CONDICION \n")
    funcion True

rest = do
    putStrLn ("Introduce al primer numero: \n")
    a <- getLine
    putStrLn ("Introduce al segundo numero: \n")
    b <- getLine

    let aInt = read a::Int 
    let bInt = read b::Int
    let resultado = aInt - bInt

    putStrLn ("El resultado es: "++ show resultado)
    putStrLn("\n SE CUMPLIÓ LA CONDICIÓN CRACK \n")
    funcion True

multiplica = do
    putStrLn ("Introduce al primer numero: \n")
    a <- getLine
    putStrLn ("Introduce al segundo numero: \n")
    b <- getLine

    let aInt = read a::Int 
    let bInt = read b::Int
    let resultado = aInt * bInt

    putStrLn ("El resultado es: "++ show resultado)
    putStrLn("\n SE CUMPLE CONDICION \n")
    funcion True

divi = do
    putStrLn ("Introduce al primer numero: \n")
    a <- readLn
    putStrLn ("Introduce al segundo numero: \n")
    b <- readLn

    print ("El resultado es: "++ show(a/b))
    putStrLn("\n SE CUMPLE LA CONDICION \n")
    funcion True